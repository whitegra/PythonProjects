# -*- coding: utf-8 -*-
"""Linear Regression- Density of Metal

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D-avmdy6ufiKRb50sysO6RPQ5o5BQIh3
"""

import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Label axis/ graph
plt.title('Density of Metal')
plt.xlabel('Volume (mL)')
plt.ylabel('Mass (g)')

# Given data
y = np.array([40.5, 61.8, 92.6, 110.7, 152.0])
x = np.array([15, 23, 34, 41, 56])

# Fit a linear regression model
model = LinearRegression()
model.fit(x.reshape(-1, 1), y)

# Calculate the slope and intercept of the best-fit line
slope = model.coef_[0]
intercept = model.intercept_

# Calculate the R-squared value
y_pred = model.predict(x.reshape(-1, 1))
total_sum_squares = np.sum((y - np.mean(y)) ** 2)
residual_sum_squares = np.sum((y - y_pred) ** 2)
r_squared = 1 - (residual_sum_squares / total_sum_squares)

# Calculate the Mean Squared Error
mse = mean_squared_error(y, y_pred)
print(f"Mean Squared Error: {mse:.2f}")

# Standard Error of Estimate
n = len(y)
standard_error = np.sqrt(residual_sum_squares / (n - 2))
print(f"Standard Error of Estimate: {standard_error:.2f}")

# Multiple R (correlation coefficient)
multiple_r = np.sqrt(r_squared)
print(f"Multiple R (Correlation Coefficient): {multiple_r:.4f}")

# Calculate the adjusted R-squared
adjusted_r_squared = 1 - ((1 - r_squared) * (n - 1) / (n - 2))
print(f"Adjusted R-squared: {adjusted_r_squared:.4f}")

# Extrapolation point
extrapolation_y = 175.0  # Replace with the Y value you want to predict
extrapolation_x = (extrapolation_y - intercept) / slope
print(f"Predicted extrapoltion point x for given Y = {extrapolation_y}: {extrapolation_x:.2f}")

# Interpolation point
interpolation_y = 100.0  # Replace with the Y value you want to predict
interpolation_x = (interpolation_y - intercept) / slope
print(f"Predicted interpolation point x for given Y = {interpolation_y}: {interpolation_x:.2f}")

# Plotting
plt.scatter(x, y, color='purple')
plt.plot([0, max(x)], [intercept, slope * max(x) + intercept], color='black', linestyle='--', linewidth=2)
plt.scatter(extrapolation_x, extrapolation_y, color='white', label='Extrapolation Point at 175. g', s=100, marker='o', edgecolors='red')
plt.scatter(interpolation_x, interpolation_y, color='white', label='Interpolation Point at 100. g', s=100, marker='o', edgecolors='green')
plt.plot([interpolation_x, interpolation_x], [0, interpolation_y], color='grey', linestyle='--')
plt.plot([0, interpolation_x], [interpolation_y, interpolation_y], color='grey', linestyle='--')

# Display R-squared value and slope-intercept form of the best-fit line
r_squared_text = "R squared = {:.4f}".format(r_squared)
slope_intercept_text = "Best Fit Line: y = {:.2f}x + {:.2f}".format(slope, intercept)
standard_error_text = "Standard Error: {:.2f}".format(standard_error)
multiple_r_text = "Multiple R: {:.4f}".format(multiple_r)
adjusted_r_squared_text = "Adjusted R-squared: {:.4f}".format(adjusted_r_squared)

plt.text(0.5, 85, r_squared_text, fontsize=8, color='black')
plt.text(0.5, 93, slope_intercept_text, fontsize=8, color='black')

# To show the plot
plt.legend()
plt.grid(True)
plt.show()